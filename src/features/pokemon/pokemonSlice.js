import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { /*fetchPokemons,*/ pokemonApi } from './pokemonApi';

const initialState = {
  pokemons: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getPokemonAsync = createAsyncThunk(
  'pokemon/fetchPokemons',
  async () => {
    const response = await pokemonApi() /*fetchPokemons()*/;
    console.log('responce', response); 
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const pokemonSlice = createSlice({
  name: 'pokemon',
  initialState,
  
  // The `reducers` field lets us define reducers and generate associated actions
  // reducers: {
  // },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPokemonAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getPokemonAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.pokemons = action.payload;
      });
  },
});


export const selectPokemons = (state) => state.pokemon.pokemons;


export default pokemonSlice.reducer;
